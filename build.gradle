import groovy.json.JsonSlurper
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.10.0-SNAPSHOT" apply false
    id 'net.darkhax.curseforgegradle' version '1.0.7'
    id "com.github.breadmoirai.github-release" version "2.2.12"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.16.5+build.9:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = targetVersion
        }
    }

    java {
        withSourcesJar()
    }
}

def versionInfo = new JsonSlurper().parse(file("versions.json"))."${version}"

task curseforgeRelease(type: TaskPublishCurseForge) {
    disableVersionDetection()
    apiToken = findProperty("curseforge_token") ?: System.getenv("CURSEFORGE_TOKEN")

    ext.uploadFile = { modLoader, project ->
        def artifact = upload(256822, project.remapJar)
        artifact.releaseType = versionInfo.type
        artifact.changelog = versionInfo.changelog
        artifact.changelogType = "markdown"
        artifact.addModLoader(modLoader)
        artifact.addJavaVersion("Java 8")
        artifact.addGameVersion("1.16")
        artifact.addGameVersion("1.16.1")
        artifact.addGameVersion("1.16.2")
        artifact.addGameVersion("1.16.3")
        artifact.addGameVersion("1.16.4")
        artifact.addGameVersion("1.16.5")
    }

    uploadFile("Fabric", project(":fabric"))
    uploadFile("Forge", project(":forge"))
}

githubRelease {
    setToken(findProperty("github_token") ?: System.getenv("GITHUB_TOKEN"))
    setOwner("Franckyi")
    setRepo("IBE-Editor")
    setTagName("mc1.16-v" + version)
    setTargetCommitish("1.16")
    setReleaseName(archivesBaseName + "-" + version)
    setBody(versionInfo.changelog)
    setPrerelease(versionInfo.type == "alpha")
    setReleaseAssets(project(":fabric").remapJar, project(":forge").remapJar)
}