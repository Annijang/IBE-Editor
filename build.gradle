import java.nio.file.*

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            name = "Modmuss50"
            url = "http://maven.modmuss50.me/"
        }
        jcenter()
    }
}
plugins {
	id 'java'
}

version = "2.0.0"
group = "com.github.franckyi"
archivesBaseName = "IBEEditor"

///*********************************************************************************************************************
/// Everything below this line is used to make the build work. Only touch if you know what you're doing.
/// If you do know what you're doing and feel this could be improved, feel free to make a Pull Request to
/// https://github.com/The-Fireplace-Minecraft-Mods/Fabric-Forge-Combined-Build
///*********************************************************************************************************************

boolean isWindows() {
    return Os.isFamily(Os.FAMILY_WINDOWS)
}

String appendPrefix(String dir) {
    if(isWindows())
        dir = buildscript.sourceFile.getParentFile().getPath().toString()+"\\"+dir
    return dir
}

void copyFiles(String dir) {
    println("Copying $dir files...")
    File devOutDir = new File("$buildDir/libs")
    String inDirPath = appendPrefix(dir)
    File inDir = new File("$inDirPath/build/libs")
    inDir.listFiles((FilenameFilter) {
        File dir0, String name -> !name.contains("-all.jar")
    }).each { file ->
        File outFile = new File(devOutDir, file.getName())
        if (outFile.exists())
            outFile.delete()
        Files.copy(file.toPath(), outFile.toPath())
    }
}

task copyFiles {
    inputs.files(fileTree("forge/build/libs"))
    inputs.files(fileTree("fabric/build/libs"))
    outputs.files(fileTree("$buildDir/libs"))
    doLast {
        copyFiles("forge")
        copyFiles("fabric")
        Files.delete(new File("$buildDir/libs/$archivesBaseName-${version}.jar").toPath())
    }
}

task execBuilds {
    inputs.files(fileTree('fabric'))
    inputs.files(fileTree('forge'))
    outputs.files(fileTree("forge/build/libs"))
    outputs.files(fileTree("fabric/build/libs"))
    finalizedBy copyFiles
    doLast {
        def gradleFile = isWindows() ? "./gradlew.bat" : "./gradlew"
        def sout = System.out, serr = System.err
        println("Building Fabric...")
        def procFabric = "$gradleFile clean build -Pversion=$version -Pgroup=$group -PoutputJarBaseName=$archivesBaseName-Fabric-${project.gameVersion}".execute(null, new File("fabric"))
        procFabric.consumeProcessOutput(sout, serr)
        procFabric.waitForOrKill(1800000)
        println("Building Forge...")
        def procForge = "$gradleFile clean build -Pversion=$version -Pgroup=$group -PoutputJarBaseName=$archivesBaseName-Forge-${project.gameVersion}".execute(null, new File("forge"))
        procForge.consumeProcessOutput(sout, serr)
        procForge.waitForOrKill(1800000)
    }
}

build {
    finalizedBy execBuilds
}
