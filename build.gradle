import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType
import groovy.json.JsonSlurper
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "net.darkhax.curseforgegradle" version "1.0.10"
    id "com.modrinth.minotaur" version "1.2.1"
    id "com.github.breadmoirai.github-release" version "2.2.12"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.16.5+build.9:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = "${rootProject.archives_base_name}-${rootProject.minecraft_version}"
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release.set(rootProject.java_version as Integer)
    }

    java {
        withSourcesJar()
    }
}

def slurper = new JsonSlurper()
def versionInfo = slurper.parse(file("versions.json"))."${version}"
String versionInfoType = versionInfo.type
String versionInfoChangelog = versionInfo.changelog
List<String> compatibleGameVersions = slurper.parseText(rootProject.compatible_minecraft_versions as String) as List<String>

task curseforgeRelease(type: TaskPublishCurseForge) {
    disableVersionDetection()
    apiToken = findProperty("curseforge_token") ?: System.getenv("CURSEFORGE_TOKEN")

    ext.uploadFile = { modLoader, project ->
        def artifact = upload(256822, project.remapJar)
        artifact.displayName = "IBE Editor v${version} for ${modLoader} ${rootProject.minecraft_version}"
        artifact.releaseType = versionInfoType
        artifact.changelog = versionInfoChangelog
        artifact.changelogType = "markdown"
        artifact.addModLoader(modLoader)
        artifact.addJavaVersion("Java ${rootProject.java_version}")
        compatibleGameVersions.each { artifact.addGameVersion(it) }
        if (modLoader == "Fabric") {
            artifact.addRequirement("fabric-api")
        }
    }

    uploadFile("Forge", project(":forge"))
    uploadFile("Fabric", project(":fabric"))
}

task modrinthReleaseForge(type: TaskModrinthUpload) {
    uploadFile = project(":forge").remapJar
    versionName = "IBE Editor v${version} for Forge ${rootProject.minecraft_version}"
    versionNumber = "${version}+${rootProject.major_minecraft_version}-forge"
    addLoader("forge")
}

task modrinthReleaseFabric(type: TaskModrinthUpload) {
    uploadFile = project(":fabric").remapJar
    versionName = "IBE Editor v${version} for Fabric ${rootProject.minecraft_version}"
    versionNumber = "${version}+${rootProject.major_minecraft_version}-fabric"
    addLoader("fabric")
    //addDependency does not support project IDs yet
}

task modrinthRelease {
    dependsOn modrinthReleaseForge, modrinthReleaseFabric
}

tasks.withType(TaskModrinthUpload) {
    token = findProperty("modrinth_token") ?: System.getenv("MODRINTH_TOKEN")
    projectId = "E9sX1ncV"
    versionType = VersionType.valueOf(versionInfoType.toUpperCase())
    changelog = versionInfoChangelog
    compatibleGameVersions.each { addGameVersion(it) }
}

githubRelease {
    setToken(findProperty("github_token") as String ?: System.getenv("GITHUB_TOKEN"))
    setOwner("Franckyi")
    setRepo("IBE-Editor")
    setTagName("${version}+${rootProject.major_minecraft_version}")
    setTargetCommitish(rootProject.major_minecraft_version as String)
    setReleaseName("IBE Editor v${version} for Minecraft ${rootProject.minecraft_version}")
    setBody(versionInfoChangelog)
    setPrerelease(versionInfoType == "alpha")
    setReleaseAssets(project(":fabric").remapJar, project(":forge").remapJar)
}